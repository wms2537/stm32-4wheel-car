/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdbool.h"
#include "stm32f1xx_hal.h"
#include "string.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef enum
{
    READY,
    RUNNING,
    BATTLING,
    FINISHED
} GameStage_edc25;

typedef struct
{
    float posx;
    float posy;
} Position_edc25;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#ifndef ZIGBEE_H_
#define ZIGBEE_H_
#define MAX_SINGLE_MSG 95 // 可修正
#define MAX_MSG_LEN 150
#define MAX_STATUS_LEN 150
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_rx;

uint8_t zigbeeRaw[MAX_MSG_LEN];         // Raw zigbee data
uint8_t zigbeeMessage[MAX_MSG_LEN * 2]; // Double the size to save a complete message
int32_t memPtr = 0;
uint8_t cutavoid[4];

uint8_t gameStatusMessage[MAX_STATUS_LEN];

UART_HandleTypeDef *zigbee_huart;
/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void attack_id(uint8_t chunk_id);
static void MX_USART1_UART_Init(void);
static void MX_USART2_UART_Init(void);
void zigbee_Init(UART_HandleTypeDef *huart); // 初始化,开始接收消息
uint8_t zigbeeMessageRecord();                  // 刷新消息
int32_t getGameTime();
GameStage_edc25 getGameStage();
void getHeightOfAllChunks(uint8_t *dest);
uint8_t getHeightOfId(uint8_t id);
bool hasBed();
bool hasBedOpponent();
void getPosition(Position_edc25 *Pos);
void getPositionOpponent(Position_edc25 *Pos);
uint8_t getAgility();
uint8_t getHealth();
uint8_t getMaxHealth();
uint8_t getStrength();
uint8_t getEmeraldCount();
uint8_t getWoolCount();
void attack_id(uint8_t chunk_id);
void place_block_id(uint8_t chunk_id);
void trade_id(uint8_t item_id);

#endif

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  zigbee_Init(&huart2);
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t hp = 0;

  uint8_t Agility = 0;

  uint8_t count = 0;
  while (1)
  {
    /* USER CODE END WHILE */
	  hp = getHealth();
	  int32_t time = getGameTime();
	  Agility = getAgility();
	  count = getWoolCount();
	  if(time!=0)
	  {
		  int char_buf[200];
		  int char_buf_len = sprintf("health: %d aglity: %d woolcount: %d\r\n",hp,Agility,count);
		  HAL_UART_Transmit(&huart1, (uint8_t*)char_buf, char_buf_len, 100);
		  HAL_Delay(1000);
	  }
	  HAL_Delay(500);
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
int32_t modularAdd(int32_t a, int32_t b, int32_t max) // In case modular does not work for negative numbers
{
    int32_t c;
    c = a + b;
    if (c >= max)
        c -= max;
    if (c < 0)
        c += max;
    return c;
}

static uint8_t calculateChecksum(uint8_t tempMessage[], int32_t start_idx, int32_t count)
{
    uint8_t checksum = 0;
    for (int32_t i = 0; i < count; ++i)
    {
        checksum ^= tempMessage[modularAdd(i, start_idx, MAX_MSG_LEN * 2)];
    }
    return checksum;
}

static float changeFloatData(uint8_t *dat)
{
    float float_data;
    float_data = *((float *)dat);
    return float_data;
}


void zigbee_Init(UART_HandleTypeDef *huart)
{
    memset(zigbeeMessage, 0x00, MAX_MSG_LEN);
    memset(zigbeeRaw, 0x00, MAX_MSG_LEN);
    memset(gameStatusMessage, 0x00, MAX_STATUS_LEN);
    zigbee_huart = huart;
    HAL_UART_Receive_DMA(zigbee_huart, zigbeeRaw, MAX_MSG_LEN);
}

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart == zigbee_huart)
    {
        uint8_t *zigbeeMsgPtr = &zigbeeMessage[memPtr];
        uint8_t *rawPtr = &zigbeeRaw[0];
        memcpy(zigbeeMsgPtr, rawPtr, sizeof(uint8_t) * MAX_MSG_LEN / 2);
        memPtr = modularAdd(MAX_MSG_LEN / 2, memPtr, MAX_MSG_LEN * 2);
        zigbeeMessageRecord();
        // zigbeeMessageRecord is completed almost instantly in the callback function.
        // Please don't add u1_printf into the function.
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart == zigbee_huart)
    {
        uint8_t *zigbeeMsgPtr = &zigbeeMessage[memPtr];
        uint8_t *rawPtr = &zigbeeRaw[MAX_MSG_LEN / 2];
        memcpy(zigbeeMsgPtr, rawPtr, sizeof(uint8_t) * MAX_MSG_LEN / 2);
        memPtr = modularAdd(MAX_MSG_LEN / 2, memPtr, MAX_MSG_LEN * 2);
        zigbeeMessageRecord();
    }
}

uint8_t zigbeeMessageRecord()
{

    int32_t msgIndex = 0;
    uint8_t tempZigbeeMessage[MAX_MSG_LEN * 2];
    memcpy(tempZigbeeMessage, zigbeeMessage, MAX_MSG_LEN * 2);
    // In case zigbeeMessage updates in the interrupt during the loop

    int32_t prevMemPtr = memPtr; // In case memPtr changes in the interrupt during the loop
    int16_t byteNum;
    // find the first 0x55 of msgType
    for (msgIndex = modularAdd(prevMemPtr, -MAX_SINGLE_MSG, MAX_MSG_LEN * 2); msgIndex != prevMemPtr;)
    // A message is at most 30 bytes long. We find the header of the first full message
    {
        if (tempZigbeeMessage[msgIndex] == 0x55 &&
            tempZigbeeMessage[modularAdd(msgIndex, 1, MAX_MSG_LEN * 2)] == 0xAA)
        {


            cutavoid[0] = tempZigbeeMessage[modularAdd(msgIndex, 2, MAX_MSG_LEN * 2)];
            cutavoid[1] = tempZigbeeMessage[modularAdd(msgIndex, 3, MAX_MSG_LEN * 2)];
            byteNum = *((int16_t*)(cutavoid));

            uint8_t tmpchecksum;
            tmpchecksum = calculateChecksum(tempZigbeeMessage, modularAdd(msgIndex, 5, MAX_MSG_LEN * 2), byteNum);
            if (tmpchecksum == tempZigbeeMessage[modularAdd(msgIndex, 4, MAX_MSG_LEN * 2)])
            {
                break;
            }
        }
        msgIndex = modularAdd(msgIndex, -1, MAX_MSG_LEN * 2);
    }
    if (msgIndex == prevMemPtr)
    {
        return 1;
    }

    int32_t prevTime, newTime;
    prevTime = getGameTime();
    for(int32_t i = 0;i < 4;i++)
    {
        cutavoid[i] =  tempZigbeeMessage[modularAdd(msgIndex, 5 + 1 + i, MAX_MSG_LEN * 2)];
    }
    newTime = *((int32_t *)(cutavoid));
    if (newTime >= prevTime && newTime <= prevTime + 1000)
    {
        memset(gameStatusMessage, 0x00, MAX_STATUS_LEN);
        for (int32_t i = 0; i < byteNum; i++)
        {
            gameStatusMessage[i] = tempZigbeeMessage[modularAdd(msgIndex, 5 + i, MAX_MSG_LEN * 2)];
        }
    }
    return 0;
}

int32_t getGameTime()
{
    int32_t time;
    time = *((int32_t *)(&gameStatusMessage[1]));
    return time;
}

GameStage_edc25 getGameStage()
{
    uint8_t stage;
    stage = gameStatusMessage[0];
    return (GameStage_edc25)stage;
}

void getHeightOfAllChunks(uint8_t *dest)
{
    memcpy(dest, gameStatusMessage[5], 64);
}

uint8_t getHeightOfId(uint8_t id)
{
    return gameStatusMessage[5 + id];
}

bool hasBed()
{
    return (bool)gameStatusMessage[69];
}

bool hasBedOpponent()
{
    return (bool)gameStatusMessage[70];
}

void getPosition(Position_edc25 *Pos)
{
    Pos->posx = changeFloatData(gameStatusMessage + 71);
    Pos->posy = changeFloatData(gameStatusMessage + 75);
}

void getPositionOpponent(Position_edc25 *Pos)
{
    Pos->posx = changeFloatData(gameStatusMessage + 79);
    Pos->posy = changeFloatData(gameStatusMessage + 83);
}

uint8_t getAgility()
{
    return gameStatusMessage[87];
}

uint8_t getHealth()
{
    return gameStatusMessage[88];
}

uint8_t getMaxHealth()
{
    return gameStatusMessage[89];
}

uint8_t getStrength()
{
    return gameStatusMessage[90];
}

uint8_t getEmeraldCount()
{
    return gameStatusMessage[91];
}

uint8_t getWoolCount()
{
    return gameStatusMessage[92];
}

void attack_id(uint8_t chunk_id)
{
    uint8_t slaver_msg[7] = {0x55, 0xAA, 0x02, 0x00, (uint8_t)(0^chunk_id), 0, chunk_id};
    HAL_UART_Transmit(zigbee_huart, slaver_msg, 7, HAL_MAX_DELAY);
}

void place_block_id(uint8_t chunk_id)
{
    uint8_t slaver_msg[7] = {0x55, 0xAA, 0x02, 0x00, (uint8_t)(1^chunk_id), 1, chunk_id};
    HAL_UART_Transmit(zigbee_huart, slaver_msg, 7, HAL_MAX_DELAY);
}

void trade_id(uint8_t item_id)
{
    uint8_t slaver_msg[7] = {0x55, 0xAA, 0x02, 0x00, (uint8_t)(2^item_id), 2, item_id};
    HAL_UART_Transmit(zigbee_huart, slaver_msg, 7, HAL_MAX_DELAY);
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
